#!/usr/bin/env bash
# vim: ft=sh :
# ideas also from: https://github.com/mvgrimes/heroku-buildpack-perl-carton

CPANM='https://raw.githubusercontent.com/miyagawa/cpanminus/master/cpanm'

main() {
   # fail fast and fail hard
   set -eo pipefail

   local BUILD_DIR="$(ensure_dir "$1")"
   local CACHE_DIR="$(ensure_dir "$2")"
   local ENV_DIR="$(ensure_dir "$3")"

   [ -n "$BUILDPACK_VERBOSE" ] && __main_print_buildpack_details

   # use "new stuff" as much as possible. The custom "perl" will be wiped
   # out if return to system perl is requested, so no harm in including
   # that directory in any case
   export PATH="$BUILD_DIR/local/bin:$BUILD_DIR/local/perl/bin:$PATH"
   export PERL5LIB="$BUILD_DIR/local/lib/perl5:$PERL5LIB"

   # reuse last compilations if available
   copy_local "$CACHE_DIR" "$BUILD_DIR"

   # build what's necessary
   build "$BUILD_DIR" "$ENV_DIR"

   # save compilation in cache for future reuse
   [ -d "$BUILD_DIR/local" ] && copy_local "$BUILD_DIR" "$CACHE_DIR"

   # prepare files with environment for run stage
   prepare_run_environment "$BUILD_DIR"

   return 0
}

build() {
   local BUILD_DIR="$1"
   local ENV_DIR="$2"

   # execute in subshell to avoid change directory side effects
   (
      local CPANM_OPTS="$(_get_var "$ENV/PERL_CPANM_OPTS" "$CPANM_OPTS")"
      cd "$BUILD_DIR"
      mkdir -p 'local'

      echo "-----> Installing perl"
      __build_install_perl

      echo "-----> Installing cpanm and carton"
      __build_install_cpanm_and_carton

      echo "-----> Installing dependencies"
      __build_install_dependencies
   )
}

prepare_run_environment() {
   local BUILD_DIR="$1"

   # $HOME/local/perl/bin is always added, it might be missing but
   # no harm done
   mkdir -p "$BUILD_DIR/.profile.d"
   cat > "$BUILD_DIR/.profile.d/perl-env.sh" <<'END'
export PATH="$HOME/bin:$HOME/local/bin:$HOME/local/perl/bin:$PATH"
export PERL5LIB="$HOME/local/lib/perl5:$PERL5LIB"
END
}

__main_print_buildpack_details() {
   echo "-----> 'compile' parameters"
   {
      env | sort
      echo ''
      echo "BUILD_DIR [$BUILD_DIR]"
      ls -l "$BUILD_DIR"
      echo "CACHE_DIR [$CACHE_DIR]"
      ls -l "$CACHE_DIR"
      echo "ENV_DIR   [$ENV_DIR]"
      ls -l "$ENV_DIR"
   } | indent
}

_get_var() {
   local VARFILE="$1"
   local DEFAULT="$2"
   if [ -e "$VARFILE" ] ; then
      cat "$VARFILE"
   else
      echo "$DEFAULT"
   fi
}

__build_install_dependencies_add_epan_dirs() {
   # sweep possible DarkPAN candidates
   local _d d
   for _d in epan dpan ; do
      d="$PWD/$_d"
      [ -d "$d" ] || continue
      EPAN=("${EPAN[@]}" '--mirror' "file://$d")
   done

   # if something was actually found, insist on using mirrors only
   # and make sure www.cpan.org is present but at the end, so that it
   # can be overridden
   if [ "${#EPAN[@]}" -gt 0 ] ; then
      # append "usual" mirrors and use mirrors for index
      EPAN=("${EPAN[@]}" '--mirror' 'http://www.cpan.org' '--mirror-only')
   fi
}

__build_install_dependencies() {
   # this will contain all our local DarkPANs, safely across
   # recursive calls (i.e. it will accumulate ancestors but not
   # clutter them or siblings)
   declare -a EPAN=("${EPAN[@]}")
   __build_install_dependencies_add_epan_dirs

   # do stuff from gitpan first, because it's not in the records or
   # has to override stuff in the records
   [ -e gitpanfile ] && __build_install_dependencies_gitpanm

   # proceed with regular stuff
   if [ -e 'cpanfile.snapshot' ] ; then
      __build_install_dependencies_carton
   else
      # use cpanm, possibly taking array EPAN in consideration
      __build_install_dependencies_cpanm --installdeps .
   fi
}

__build_install_dependencies_gitpanm() {
   echo "detected gitpanfile" | indent
   local GPM_DIR="$BUILD_DIR/local/gitpanm"
   mkdir -p "$GPM_DIR"
   cat gitpanfile | while read name repo commit ; do
      echo "gitpanfile -> $name $repo $commit" | indent
      # subshell here, yay! Get the code
      cd "$GPM_DIR"
      [ -d "$name" ] || git clone "$repo" "$name"
      cd "$name"
      git fetch
      if [ -n "$commit" ] ; then
         git checkout "$commit"
      else
         git pull origin "$(git rev-parse --abbrev-ref HEAD)"
      fi

      # recurse for installing this repo's dependencies
      __build_install_dependencies

      # install the very library
      cd "$GPM_DIR"
      __build_install_dependencies_cpanm "./$name"
   done
}

__build_install_dependencies_carton() {
   local CARTON=carton
   local PRIVATE_CARTON='vendor/bin/carton'
   [ -x "$PRIVATE_CARTON" ] && CARTON="$PRIVATE_CARTON"

   declare -a PARAMS=('install' '--deployment')
   [ -d 'vendor/cache' ] && PARAMS=("${PARAMS[@]}" '--cached')

   # if we're recurring, chances are that carton will try to install
   # stuff in the wrong place, so we have to attempt something
   if [ "$(readlink -f "$BUILD_DIR")" != "$(readlink -f '.')" ] ; then
      # try to make "local" point to the *right* local, or cross fingers
      [ -e local ] || ln -s "$BUILD_DIR/local"
   fi

   "$CARTON" "${PARAMS[@]}"
}

__build_install_dependencies_cpanm() {
   # now do the actual installation heavylifting
   cpanm 2>&1                 \
      --no-man-pages          \
      $CPANM_OPTS             \
      $(_get_var "$ENV_DIR/BUILDPACK_CPANM_VERBOSE" '--quiet') \
      $(_get_var "$ENV_DIR/BUILDPACK_CPANM_TEST" '--notest')   \
      -l "$BUILD_DIR/local"   \
      "${EPAN[@]}"            \
      "$@"                    \
      | indent
}

__build_install_cpanm_and_carton() {
   if [ ! -e "$BUILD_DIR/local/bin/cpanm" ] ; then
      curl -L --silent "$CPANM"        \
         | perl - App::cpanminus 2>&1  \
            --quiet                    \
            --notest                   \
            --no-man-pages             \
            $CPANM_OPTS                \
            -l "$BUILD_DIR/local"      \
         | indent
      perl_script_relocate "$BUILD_DIR/local/bin/cpanm" | indent
   fi

   if [ ! -e "$BUILD_DIR/local/bin/carton" ] ; then
      __build_install_dependencies_cpanm Carton
      perl_script_relocate "$BUILD_DIR/local/bin/carton" | indent
   fi
}

__build_install_perl_restore_system_perl() {
   echo 'restoring system perl'
   rm -rf "$BUILD_DIR/local"/{bin,lib,perl}
}

__build_install_perl() {
   local FLAG_FILE="$BUILD_DIR/.perl-archive"

   # revert to system perl if no custom one is requested
   if [ ! -r "$FLAG_FILE" ] ; then
      [ -d "$BUILD_DIR/local/perl" ] && __build_install_perl_restore_system_perl | indent
      return 0
   fi

   # if the requested perl did not change... do nothing
   local LOCAL_FLAG_FILE="$BUILD_DIR/local/.perl-archive"
   if diff >/dev/null 2>&1 "$FLAG_FILE" "$LOCAL_FLAG_FILE" ; then
      echo keeping previous perl | indent
      return 0
   fi

   {
      # remove any previous custom perl, we have to change it anyway
      __build_install_perl_restore_system_perl

      # download and extract new one
      local URL="$(<"$BUILD_DIR/.perl-archive")"
      echo "getting perl from $URL"
      curl -s -L "$URL" | tar xzf -

      # move to target place, then make hash-bangs general
      local ARCHIVE="${URL##*/}"
      local VERSION="${ARCHIVE%.tar*}"
      echo "archive is '$ARCHIVE', extracted directory '$VERSION'"
      mv "$VERSION" "$BUILD_DIR/local/perl"
      perl_script_relocate "$BUILD_DIR/local/perl/bin"/*

      # save flag file for comparison in next build
      cp "$FLAG_FILE" "$LOCAL_FLAG_FILE"
   } | indent
}

copy_local() {
   local SOURCE_DIR="$1"
   local DESTINATION_DIR="$2"
   rm -rf "$DESTINATION_DIR/local"
   if [ -d "$SOURCE_DIR/local" ]; then
      cp -a "$SOURCE_DIR/local" "$DESTINATION_DIR"
   fi

}

ensure_dir() {
   mkdir -p "$1"
   readlink -f "$1"
}

indent() {
  sed -u 's/^/       /'
}

perl_script_relocate() {
   local F
   for F in "$@" ; do
      perl -i -ple 's{^#!.*perl\s*$}{#!/usr/bin/env perl} if $. == 1' "$F"
   done
}

main "$@"
