#!/usr/bin/env bash
# vim: ft=sh :
# ideas also from: https://github.com/mvgrimes/heroku-buildpack-perl-carton

CPANM='https://raw.githubusercontent.com/miyagawa/cpanminus/master/cpanm'

main() {
   # fail fast and fail hard
   set -eo pipefail

   local BUILD_DIR="$(ensure_dir "$1")"
   local CACHE_DIR="$(ensure_dir "$2")"
   local ENV_DIR="$(ensure_dir "$3")"

   [ -n "$BUILDPACK_VERBOSE" ] && __print_buildpack_details

   # use "new stuff" as much as possible. The custom "perl" will be wiped
   # out if return to system perl is requested, so no harm in including
   # that directory in any case
   export PATH="$BUILD_DIR/local/bin:$BUILD_DIR/local/perl/bin:$PATH"
   export PERL5LIB="$BUILD_DIR/local/lib/perl5:$PERL5LIB"

   # reuse last compilations if available
   copy_local "$CACHE_DIR" "$BUILD_DIR"

   # build what's necessary
   build "$BUILD_DIR" "$ENV_DIR"

   # save compilation in cache for future reuse
   [ -d "$BUILD_DIR/local" ] && copy_local "$BUILD_DIR" "$CACHE_DIR"

   # prepare files with environment for run stage
   prepare_run_environment "$BUILD_DIR"

   return 0
}

build() {
   local BUILD_DIR="$1"
   local ENV_DIR="$2"

   # execute in subshell to avoid change directory side effects
   (
      local CPANM_OPTS="$(_get_var "$ENV/PERL_CPANM_OPTS" "$CPANM_OPTS")"
      cd "$BUILD_DIR"
      __install_perl
      __install_cpanm
      __install_dependencies
   )
}

prepare_run_environment() {
   local BUILD_DIR="$1"

   # $HOME/local/perl/bin is always added, it might be missing but
   # no harm done
   mkdir -p "$BUILD_DIR/.profile.d"
   cat > "$BUILD_DIR/.profile.d/perl-env.sh" <<'END'
export PATH="$HOME/bin:$HOME/local/bin:$HOME/local/perl/bin:$PATH"
export PERL5LIB="$HOME/local/lib/perl5:$PERL5LIB"
END
}

__print_buildpack_details() {
   echo "-----> 'compile' parameters"
   {
      env | sort
      echo ''
      echo "BUILD_DIR [$BUILD_DIR]"
      ls -l "$BUILD_DIR"
      echo "CACHE_DIR [$CACHE_DIR]"
      ls -l "$CACHE_DIR"
      echo "ENV_DIR   [$ENV_DIR]"
      ls -l "$ENV_DIR"
   } | indent
}

_get_var() {
   local VARFILE="$1"
   local DEFAULT="$2"
   if [ -e "$VARFILE" ] ; then
      cat "$VARFILE"
   else
      echo "$DEFAULT"
   fi
}

__install_dependencies() {
   echo "-----> Installing dependencies"
   declare -a EPAN
   local _d d
   for _d in epan dpan ; do
      d="$PWD/$_d"
      [ -d "$d" ] || continue
      EPAN=("${EPAN[@]}" '--mirror' "file://$d")
   done
   if [ "${#EPAN[@]}" -gt 0 ] ; then
      # append "usual" mirrors and use mirrors for index
      EPAN=("${EPAN[@]}" '--mirror' 'http://www.cpan.org' '--mirror-only')
   fi
   cpanm 2>&1                 \
      --no-man-pages          \
      $CPANM_OPTS             \
      $(_get_var "$ENV/BUILDPACK_CPANM_VERBOSE" '--quiet') \
      $(_get_var "$ENV/BUILDPACK_CPANM_TEST" '--notest')   \
      -l "$BUILD_DIR/local"   \
      "${EPAN[@]}"            \
      --installdeps .         \
      | indent
}

__install_cpanm() {
   [ -e "$BUILD_DIR/local/bin/cpanm" ] && return
   echo "-----> Bootstrapping cpanm"
   curl -L --silent "$CPANM"        \
      | perl - App::cpanminus 2>&1  \
         --quiet                    \
         --notest                   \
         --no-man-pages             \
         $CPANM_OPTS                \
         -l "$BUILD_DIR/local"      \
      | indent
   perl_script_relocate "$BUILD_DIR/local/bin/cpanm" | indent
}

__restore_system_perl() {
   echo 'restoring system perl'
   rm -rf "$BUILD_DIR/local/perl"
   rm -f "$BUILD_DIR/local/bin/cpanm"
}

__install_perl() {
   local FLAG_FILE="$BUILD_DIR/.perl-archive"

   echo "-----> Installing perl"

   # revert to system perl if no custom one is requested
   if [ ! -r "$FLAG_FILE" ] ; then
      [ -d "$BUILD_DIR/local/perl" ] && __restore_system_perl | indent
      return 0
   fi

   # if the requested perl did not change... do nothing
   local LOCAL_FLAG_FILE="$BUILD_DIR/local/.perl-archive"
   if diff >/dev/null 2>&1 "$FLAG_FILE" "$LOCAL_FLAG_FILE" ; then
      echo keeping previous perl | indent
      return 0
   fi

   {
      # remove any previous custom perl, we have to change it anyway
      __restore_system_perl

      # download and extract new one
      local URL="$(<"$BUILD_DIR/.perl-archive")"
      echo "getting perl from $URL"
      curl -s -L "$URL" | tar xzf -

      # move to target place, then make hash-bangs general
      local ARCHIVE="${URL##*/}"
      local VERSION="${ARCHIVE%.tar*}"
      echo "archive is '$ARCHIVE', extracted directory '$VERSION'"
      mv "$VERSION" "$BUILD_DIR/local/perl"
      perl_script_relocate "$BUILD_DIR/local/perl/bin"/*

      # save flag file for comparison in next build
      cp "$FLAG_FILE" "$LOCAL_FLAG_FILE"
   } | indent
}

copy_local() {
   local SOURCE_DIR="$1"
   local DESTINATION_DIR="$2"
   rm -rf "$DESTINATION_DIR/local"
   if [ -d "$SOURCE_DIR/local" ]; then
      cp -a "$SOURCE_DIR/local" "$DESTINATION_DIR"
   fi

}

ensure_dir() {
   mkdir -p "$1"
   readlink -f "$1"
}

indent() {
  sed -u 's/^/       /'
}

perl_script_relocate() {
   local F
   for F in "$@" ; do
      echo "relocating '$F'"
      perl -i -ple 's{^#!.*perl\s*$}{#!/usr/bin/env perl} if $. == 1' "$F"
   done
}

main "$@"
